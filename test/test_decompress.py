from aiokdb import d9


# (eval) >  500#0j
# DEBUG:aiokdb:< sending b'\x01\x01\x00\x00\x14\x00\x00\x00\n\x00\x06\x00\x00\x00500#0j'
# DEBUG:aiokdb:> recv ver=1 msgtype=2 flags=1 msglen=53
# DEBUG:aiokdb:decompressing payload ae0f0000c00700f401000000ff00ffff00ff00ff00ff00ff00ff00ff00ff00ff3f00ff00ff00ff00ff00ff008f
# ValueError: compressed payload NYI {flags}
def test_decompress() -> None:
    data = bytes.fromhex(
        "0102010035000000ae0f0000c00700f401000000ff00ffff00ff00ff00ff00ff00ff00ff00ff00ff3f00ff00ff00ff00ff00ff008f"
    )
    k = d9(data)
    assert len(k) == 500
    for i in k.kJ():
        assert i == 0

    # 500#12848484j
    data = bytes.fromhex(
        "0102010052000000ae0f0000000700f4010000640dfec40000000169ffc9ffc4ff00010000ff69ffc9ffc4ff0000000169ffc9ffc4ffff0001000069ffc9ffc4ff0000000169ff1fc9ffc4ff00010000696e"
    )
    k = d9(data)
    assert len(k) == 500
    for i in k.kJ():
        assert i == 12848484

    # (200#12848484j),300#3456
    data = bytes.fromhex(
        "010201005f000000ae0f0000000700f4010000640dfec40000000169ffc9ffc4ff000100003f69ffc9ffc4ff000000016926800dff000100018dff0dff000100018dff0dffff000100018dff0dff000100018dff0dff0f000100018dff0d35"
    )
    k = d9(data)
    assert len(k) == 500
    for i, j in enumerate(k.kJ()):
        if i < 200:
            assert j == 12848484
        else:
            assert j == 3456


def test_decompress_2() -> None:
    data = bytes.fromhex(
        "010201002e0b0000b61900008800000200000063626300080b000100016465706fa073697449640001010001050200320001cca7550c5800425afc96f9de2718001568c8aeef90fba100806184247ab16994002646347381ad9ec400082469ce7846b9c80016059901ad29ea7a0081772ca401e6b0d0007e6b0794d988cd0200b8f91d624812cf2a009d4a1fee1b3b1a6c00dab26e6bd1ce956d00efef8f18ec3b9757005c805608e6cfcfdc002bb2dc5f1cc4cad8001d5b844b6bb4eba200117d37ee8dde9dd200a349149bc4ffba6e00ff082ef20cc9c178005f81170ea93aa19800c20cce13b9d7e71e0009246a35408c4b1100914cf8ff6e03524c009794b83c2ef7224e00046eaf88d343f2e9008ec778e99848021000a6aab32d675555e300abecf346e5eefb1500f936beb5fc459f820079386d08cad0a5df0073ec3ff4896b386a0005be8404d3c171bc000a0a8363f3ba483f0042e5e98930f3e70200b39b563870dbe4fe006bf7143252680a4900797cd0c75e47ecc00047a0230806e921350026aa0c9972ff2d3600c3315d59e40be36d00e71484503bac929e0098e05aaaf59d980a006ba81ba6c27216a0004abcd27647c53b5f40adadca999522b200bb00e764f6084fa647440052df38728431303b00fd0c5fbeb4bff1870027e81ebe2550f1a600f4bd874549560ad20018dfb01ff19aa31b0053a0a43d72c9d72200321a43bce70ed555002a184544a291234b0013e91356fde8c934005444748ce2c9bfaa003d14bd6e432dc64f00de524a3096f609690044b26c12ddb9676100dea83f9fe68b70180098206178fc621d2c0002d120d8a8111d5600cf338eab6c0e039080b9e80e02038cee1d0000a001ab31a87cb7c500d5b76daddc95858b004bfb1b48a13785ef00b6dfb201d346049a0082811d825c99b1ff0099ea5dc6cde78514001d63030c090b227d00e35ea65fa3b9ba4a00f21b7e64b209f98c00ad726b0d5306043b00c22bc75a298101ac000304f5e058a9a9f2007531579b10a3c0b7005de2dc6d6988079200c2273992b4c1c7710083024235df7d63e200a6a09c46dab0c2f00002042291afb9ee210094828a9decc9dc0c00adda1a653fc43c0b0032a8e1d240ebb0eb002d6ac9f429b71dfb008e5f385cbdb0bb9300b47bd61c2bfcdb5900d44dca18e1688357005010b8a9621709a300b40f84c07917a362002d7565e0015bdf7a00de8a873ce3b5326b0058ca7b12f40df942006d63f47ad27e7e7a00587f3ec5606e64b600b2bbaace08b195bf007f345c4eda5d310d00b2e9dccbb4ffc83e00875cc66abef45bc400056200630b00080002006300757272656e630079006163636f756e4074007478696461006d026f1b0372616e736163407454696d65000d0065066d7400130553746174750273740065787400000042080000000b00320001544a4527000011715553300000ff0603110306081103110306121103114484070032021d286bee00016a00351617430518430d3f16197b4305310e0143053f063f16290604e14305005ed0b200025e163f06ef2c06290e2906290e0300030001430610f2052a01000100bca022650103863ba1010350d6fedc010bbd061c06f706f70643052c066f2c0e010300012c060043052807001f3202000100ff0026070400ca9ac63b0003501540420f00030256c1ca2e0010a5d4e80002b51660a0724e18090001b506e808764817000100e1f5054d000200d206ef00540200028060c3b8f9b75f0100431fc6e8a47e8d0301806215b506b516259e05404d1d0c0032026ee600c597b123ca0adcc80801b17de90119bd42da427ce9012b0d16095f02a72006944ccb22c00051f908b5f3bde801c891359f040d1ec000eaf5b07df8821dc000743330f7b6d7010a30170012ab0293cf6b7c82acd7012bd9c19daad701206c8d4d9da9d70122e9882c3347d701c88aafdc00001cca0adbaeebaf3441d601f612177b31d601d3102a74ee2ed601c0584404ee16d601969ca4c39e001bca0a5d76a2385181d101ec05f0ef9f16c000205205432571dc01267a08933c5cdc0101e00a83042615c000b0a26283c30014ca0a540c5e8ec00213c00079ad4cf21f0341c000c39234d814c9010c109c1ad511c9013fe02b086cd802c00042184aeb0067dcc90a2b89283c04d2ccc300c29b9ff5d04105011f2c5cd8cf0501281067933dce05015aba800434cb05011179a956bd4105013eb5a070bb0501db10d540dbb40501fa2bf8040ab205010f183f7ca4410501780c3f256b05014e10c3f3e9630501155c350838b7cac300f53aef7082b5030106ed8c86af0301206db6fefcaa03010f1008e04fa40301f56c17c3a29c030102003200013400017d000a33000a0001320200010007317b000700043700040007340e320e35ff00070004310e330e330e310e320e320ebf340e330e320e310e311e321e32320d0232310d616363743174d8657374350502123411023105f1020736000000020217350e3205006b726973683132339934063230000200083139000859000231380002000831370d317b36050006313505000734060005312f330d0300000500053131050000e5000431300d6163170534050207cf330502073205020234421108022207450332050b0450656e6469086e6700351e436f6d70f46c65110064501f35162c282c08ff2c3035062c083506351e2c082c80351e893506000032020a0016000000006163636f756e740020646f6573206e6f01540065786973740a00f8160000616b000000000a701652ff000000000a70000000000a00000000005f0a18161a000000000a00b000000000496e76616c696420007072657646756e6480546f6b656e20694e00c06465706f73695400170010717565735400666f72882061630c04343030000420312063757217006e6360792054455354000106690144003433626365373000652d643535352d32006131382d34353434102d613239030033346240313365392070170076c1330830316162335000150000376362372d633564131800550036644c00646463083935380d006234620a0a00b0403443085553447410206465701c03696420a031333536660100384e00803933342d353434190080373438632d65325a0080626661613364311400047072130a3865616236006330652d30333930302d623965150055003032022d030038636565396640383261300a00b0403105430854160d62643665340433324900633634662d086465351f0034613330402d39366636300f003940343462322070170b3030316162335000150037630a621a5a3143183663313200646462392d3637364a31490161150033665f002d00653638623730313840393832302070178f312037386663361f00316422324e003032641c003230066415005900313131643520366366333350330000bd00000a000000010a42b040344318d0346463610900651c000e00243833180037351d0031301a6215013904000600303961143362140070170b6464362033366334611b00306230622d323808001b00646502391b003333333836668033376431350a00b05b80306638346330371400050600611e00363232642d0a3703003548003030313500626466376164652002701731a7000000496e3076616c694400020c696e02200100706f73697420407265717565735400662c6f724107111938590037338463651e00623533321b0023570015006361374f0031320066343064663934325036642070170076330864406436333663344c7a36403366343761641f0037426552002d376135150037006633652d633536308036653634623662120e05006630431862626161630465301500623139352d04626651002d33343563002d346564613564331831306450925c00646363806262342d666663150002335d00372d35636336011b006162656634356240633430352070172ff9080200000003"
    )
    d9(data)
